{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "TriggerReactor",
	"patterns": [
		{
			"include": "#import"
		},
		{
			"include": "#executors"
		},
		{
			"include": "#placeholders"
		},
		{
			"include": "#class"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants-and-special-vars"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"keywords":{
			"patterns": [
				{
					"patterns": [
						{
							"name": "keyword.control.TriggerReactor",
							"match": "\\b(IF|ELSE|ELSEIF|ENDIF|IS|WHILE|ENDWHILE|FOR|ENDFOR|TRY|CATCH|FINALLY|ENDTRY|LAMBDA|ENDLAMBDA)\\b"
						},
						{
							"name": "keyword.control.TriggerReactor",
							"match": "\\b(if|else|elseif|endif|is|while|endwhile|for|endfor|try|catch|finally|endtry|lambda|endlambda)\\b"
						},
						{
							"name": "entity.name.namespace",
							"match": "\\b(SYNC|ENDSYNC|ASYNC|ENDASYNC)\\b"
						},
						{
							"name": "entity.name.namespace",
							"match": "\\b(sync|endsync|async|endasync)\\b"
						},
						{
							"name": "keyword.control.ternary.TriggerReactor",
							"match": "\\?|:"
						}
					]
				},
				{
					"name": "keyword.operator.TriggerReactor",
					"match": "(===?|!=|<=|>=|<>|<|>)"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.TriggerReactor",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.TriggerReactor",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.TriggerReactor"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.TriggerReactor"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.TriggerReactor"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.TriggerReactor"
				}
			]
		},
		"constants-and-special-vars": {
			"patterns": [
				{
					"match": "\\b(true|false|null)\\b",
					"name": "constant.language.TriggerReactor"
				}
			]
		},
		"comments": {
			"name": "comment.line.TriggerReactor",
			"begin": "//",
			"end": "$"
		},
		"import": {
			"begin": "(import|IMPORT)\\s(\\w|\\.)*(\\sas\\s|\\sAS\\s)?",
			"beginCaptures": {
				"1": { "name" : "storage.modifier.import.TriggerReactor" },
				"3": { "name" : "storage.modifier.import.TriggerReactor" }
			},
			"end": "(\\n|;)"
		},
		"functions": {
			"name": "entity.name.function.TriggerReactor",
			"match": "([A-Za-z_$][\\w$]*)\\s*(\\()"
		},
		"class": {
			"name": "entity.name.class.TriggerReactor",
			"match": "\\b(?<!\\.)[A-Z]\\w*\\("
		},
		"variables": {
			"name": "variable.other.object.triggerreactor",
			"match": "(?<![\\w$])[a-zA-Z_$][\\w$]*(?=\\s*\\.\\s*[\\w$]+)"
		},
		"executors": {
			"name": "entity.other.inherited-class.triggerreactor",
			"match": "^\\s*#[A-Z|a-z]+"
		},
		"placeholders": {
			"name" : "variable.parameter",
			"match": "\\$\\w+"
		}
	},
	"scopeName": "source.triggerreactor"
}